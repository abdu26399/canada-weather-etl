name: Weather ETL (Windows)

#on:
#  workflow_dispatch:
#  schedule:
#    - cron: "0 */6 * * *"  # every 6 hours (UTC)

jobs:
  run-etl:
    runs-on: windows-latest

    env:
      OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      AZURE_CREDENTIALS:   ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
      AZURE_SQL_SERVER:    ${{ secrets.AZURE_SQL_SERVER }}       # logical server
      AZURE_SQL_DATABASE:  ${{ secrets.AZURE_SQL_DATABASE }}     # database name
      AZURE_SQL_USERNAME:  ${{ secrets.AZURE_SQL_USERNAME }}     # SQL login
      AZURE_SQL_PASSWORD:  ${{ secrets.AZURE_SQL_PASSWORD }}     # SQL login password
      AZURE_ODBC_DRIVER:   "ODBC Driver 17 for SQL Server"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Show Azure subscription (debug)
        shell: pwsh
        run: az account show --output table

      - name: Show SQL Server info (debug)
        shell: pwsh
        run: |
          az sql server show `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -n "${{ env.AZURE_SQL_SERVER }}"

      - name: Ensure SQL Public Network Access is Enabled
        shell: pwsh
        run: |
          az sql server update `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -n "${{ env.AZURE_SQL_SERVER }}" `
            --set publicNetworkAccess=Enabled

      - name: Check SQL Public Network Access (debug)
        shell: pwsh
        run: |
          az sql server show `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -n "${{ env.AZURE_SQL_SERVER }}" `
            --query publicNetworkAccess -o tsv

      - name: Get runner public IP
        id: ip
        shell: pwsh
        run: |
          $ip = (Invoke-RestMethod -Uri "https://api.ipify.org")
          "ip=$ip" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Runner IP: $ip"

      - name: Open SQL firewall for this run
        shell: pwsh
        run: |
          $rule = "gha-${{ github.run_id }}"
          az sql server firewall-rule create `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -s "${{ env.AZURE_SQL_SERVER }}" `
            -n $rule `
            --start-ip-address "${{ steps.ip.outputs.ip }}" `
            --end-ip-address   "${{ steps.ip.outputs.ip }}"
          az sql server firewall-rule show `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -s "${{ env.AZURE_SQL_SERVER }}" `
            -n $rule -o table
          Start-Sleep -Seconds 20

      - name: List SQL firewall rules (debug)
        shell: pwsh
        run: |
          az sql server firewall-rule list `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -s "${{ env.AZURE_SQL_SERVER }}" -o table

      - name: DNS + TCP 1433 test (debug)
        shell: pwsh
        run: |
          $fqdn = "${{ env.AZURE_SQL_SERVER }}.database.windows.net"
          Write-Host "FQDN: $fqdn"
          Resolve-DnsName $fqdn
          Test-NetConnection -ComputerName $fqdn -Port 1433

      - name: Confirm DB exists (debug)
        shell: pwsh
        run: |
          az sql db show `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -s "${{ env.AZURE_SQL_SERVER }}" `
            -n "${{ env.AZURE_SQL_DATABASE }}" `
            --query status -o tsv

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Show available ODBC drivers (debug)
        shell: pwsh
        run: python -c "import pyodbc; print('ODBC drivers:', pyodbc.drivers())"

      - name: Generate runtime config
        shell: pwsh
        run: |
          Copy-Item config\config.yaml.example config\config.yaml
          (Get-Content config\config.yaml -Raw) `
            -replace 'PUT_OPENWEATHER_API_KEY', "$env:OPENWEATHER_API_KEY" `
            -replace 'PUT_AZURE_SQL_SERVER',    "$env:AZURE_SQL_SERVER" `
            -replace 'PUT_AZURE_SQL_DATABASE',  "$env:AZURE_SQL_DATABASE" `
            -replace 'PUT_AZURE_SQL_USERNAME',  "$env:AZURE_SQL_USERNAME" `
            -replace 'PUT_AZURE_SQL_PASSWORD',  "$env:AZURE_SQL_PASSWORD" `
            | Set-Content config\config.yaml

      - name: PyODBC quick probe (debug)
        shell: pwsh
        run: python scripts\debug_odbc.py

      - name: Run tests
        shell: pwsh
        run: pytest -q tests -vv

      - name: Run ETL
        shell: pwsh
        run: python main.py

      - name: Close SQL firewall (cleanup)
        if: always()
        shell: pwsh
        run: |
          $rule = "gha-${{ github.run_id }}"
          az sql server firewall-rule delete `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -s "${{ env.AZURE_SQL_SERVER }}" `
            -n $rule
