name: Weather ETL (Windows)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # every 6 hours (UTC)

jobs:
  run-etl:
    runs-on: windows-latest

    env:
      # --- Required secrets (add in Repo → Settings → Secrets and variables → Actions) ---
      OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      AZURE_CREDENTIALS:   ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
      AZURE_SQL_SERVER:    ${{ secrets.AZURE_SQL_SERVER }}       # logical server name (NO .database.windows.net)
      AZURE_SQL_DATABASE:  ${{ secrets.AZURE_SQL_DATABASE }}     # database name
      AZURE_SQL_USERNAME:  ${{ secrets.AZURE_SQL_USERNAME }}     # SQL login (not your Azure email)
      AZURE_SQL_PASSWORD:  ${{ secrets.AZURE_SQL_PASSWORD }}     # SQL login password

      # ODBC driver consumed by your load.py
      AZURE_ODBC_DRIVER: "ODBC Driver 17 for SQL Server"

    steps:
      # --- Repo & Azure auth ---
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Show Azure subscription (debug)
        shell: pwsh
        run: az account show --output table

      # --- Networking prep & diagnostics ---
      - name: Get runner public IP
        id: ip
        shell: pwsh
        run: |
          $ip = (Invoke-RestMethod -Uri "https://api.ipify.org")
          "ip=$ip" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Runner IP: $ip"

      - name: Open SQL firewall for this run
        shell: pwsh
        run: |
          $rule = "gha-${{ github.run_id }}"
          az sql server firewall-rule create `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -s "${{ env.AZURE_SQL_SERVER }}" `
            -n $rule `
            --start-ip-address "${{ steps.ip.outputs.ip }}" `
            --end-ip-address   "${{ steps.ip.outputs.ip }}"

      - name: Check SQL Public Network Access (debug)
        shell: pwsh
        run: |
          az sql server show `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -n "${{ env.AZURE_SQL_SERVER }}" `
            --query publicNetworkAccess -o tsv

      - name: List SQL firewall rules (debug)
        shell: pwsh
        run: |
          az sql server firewall-rule list `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -s "${{ env.AZURE_SQL_SERVER }}" -o table

      - name: DNS + TCP 1433 test (debug)
        shell: pwsh
        run: |
          $fqdn = "${{ env.AZURE_SQL_SERVER }}.database.windows.net"
          Write-Host "FQDN: $fqdn"
          Resolve-DnsName $fqdn
          Test-NetConnection -ComputerName $fqdn -Port 1433

      # --- Python setup & dependencies ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Show available ODBC drivers (debug)
        shell: pwsh
        run: python -c "import pyodbc; print('ODBC drivers:', pyodbc.drivers())"

      # --- Build runtime config from template (no secrets committed) ---
      - name: Generate runtime config
        shell: pwsh
        run: |
          Copy-Item config\config.yaml.example config\config.yaml
          (Get-Content config\config.yaml -Raw) `
            -replace 'PUT_OPENWEATHER_API_KEY', "$env:OPENWEATHER_API_KEY" `
            -replace 'PUT_AZURE_SQL_SERVER',    "$env:AZURE_SQL_SERVER" `
            -replace 'PUT_AZURE_SQL_DATABASE',  "$env:AZURE_SQL_DATABASE" `
            -replace 'PUT_AZURE_SQL_USERNAME',  "$env:AZURE_SQL_USERNAME" `
            -replace 'PUT_AZURE_SQL_PASSWORD',  "$env:AZURE_SQL_PASSWORD" `
            | Set-Content config\config.yaml

      # --- Quick pyodbc probe using same creds (pinpoints timeouts) ---
      - name: PyODBC quick probe (debug)
        shell: pwsh
        run: |
          python - << 'PY'
          import os, pyodbc, sys
          driver = os.getenv("AZURE_ODBC_DRIVER", "ODBC Driver 17 for SQL Server")
          server = os.environ["AZURE_SQL_SERVER"].strip()
          host = server if server.lower().endswith(".database.windows.net") else f"{server}.database.windows.net"
          db   = os.environ.get("AZURE_SQL_DATABASE", "master")
          uid  = os.environ["AZURE_SQL_USERNAME"]
          pwd  = os.environ["AZURE_SQL_PASSWORD"]
          dsn  = f"Driver={{{driver}}};Server=tcp:{host},1433;Database={db};Uid={uid};Pwd={pwd};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
          print("DSN (redacted):", dsn.replace(pwd, "***"))
          try:
              with pyodbc.connect(dsn) as cn:
                  cur = cn.cursor()
                  cur.execute("SELECT DB_NAME()")
                  print("Connected OK; DB_NAME():", cur.fetchone()[0])
          except Exception:
              import traceback; traceback.print_exc()
              sys.exit(1)
          PY

      # --- Your tests & ETL ---
      - name: Run tests
        shell: pwsh
        run: pytest -q tests -vv

      - name: Run ETL
        shell: pwsh
        run: python main.py

      # --- Always clean up the firewall rule ---
      - name: Close SQL firewall (cleanup)
        if: always()
        shell: pwsh
        run: |
          $rule = "gha-${{ github.run_id }}"
          az sql server firewall-rule delete `
            -g "${{ env.AZURE_RESOURCE_GROUP }}" `
            -s "${{ env.AZURE_SQL_SERVER }}" `
            -n $rule
